//! Autogenerated weights for pallet_farm_extend
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kico"), DB CACHE: 1024

// Executed Command:
// target/release/dico
// benchmark
// --chain=kico
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_farm-extend
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/pallet-weight-template.hbs
// --output
// ./pallets/farm-extend/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_farm_extend.
pub trait WeightInfo {
	fn create_pool() -> Weight;
	fn deposit_asset() -> Weight;
	fn withdraw_asset() -> Weight;
}

/// Weights for pallet_farm_extend using the Substrate node and recommended hardware.
pub struct DicoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DicoWeight<T> {
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	// Storage: FarmExtend NextPoolExtendId (r:1 w:1)
	// Storage: FarmExtend PoolExtends (r:0 w:1)
	fn create_pool() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: FarmExtend PoolExtends (r:1 w:1)
	// Storage: FarmExtend ParticipantExtends (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	fn deposit_asset() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: FarmExtend ParticipantExtends (r:1 w:1)
	// Storage: FarmExtend PoolExtends (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	fn withdraw_asset() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	// Storage: FarmExtend NextPoolExtendId (r:1 w:1)
	// Storage: FarmExtend PoolExtends (r:0 w:1)
	fn create_pool() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: FarmExtend PoolExtends (r:1 w:1)
	// Storage: FarmExtend ParticipantExtends (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	fn deposit_asset() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: FarmExtend ParticipantExtends (r:1 w:1)
	// Storage: FarmExtend PoolExtends (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	fn withdraw_asset() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
}
