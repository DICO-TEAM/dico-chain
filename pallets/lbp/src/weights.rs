//! Autogenerated weights for pallet_lbp
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kico"), DB CACHE: 1024

// Executed Command:
// target/release/dico
// benchmark
// --chain=kico
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_lbp
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/pallet-weight-template.hbs
// --output
// ./pallets/lbp/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_lbp.
pub trait WeightInfo {
	fn add_fundraising_asset() -> Weight;
	fn remove_fundraising_asset() -> Weight;
	fn create_lbp() -> Weight;
	fn exit_lbp() -> Weight;
	fn swap_exact_amount_supply() -> Weight;
	fn swap_exact_amount_target() -> Weight;
}

/// Weights for pallet_lbp using the Substrate node and recommended hardware.
pub struct DicoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DicoWeight<T> {
	// Storage: LBP SupportFundraisingAssets (r:1 w:1)
	fn add_fundraising_asset() -> Weight {
		(20_550_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: LBP SupportFundraisingAssets (r:1 w:1)
	fn remove_fundraising_asset() -> Weight {
		(21_561_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: LBP SupportFundraisingAssets (r:1 w:0)
	// Storage: LBP OngoingLbps (r:1 w:1)
	// Storage: LBP NextLbpId (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:1)
	// Storage: LBP Lbps (r:0 w:1)
	fn create_lbp() -> Weight {
		(126_654_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: LBP Lbps (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:1 w:0)
	// Storage: LBP OngoingLbps (r:0 w:1)
	fn exit_lbp() -> Weight {
		(93_223_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: LBP OngoingLbps (r:1 w:0)
	// Storage: LBP Lbps (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:3 w:1)
	fn swap_exact_amount_supply() -> Weight {
		(165_535_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: LBP OngoingLbps (r:1 w:0)
	// Storage: LBP Lbps (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:3 w:1)
	fn swap_exact_amount_target() -> Weight {
		(155_115_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: LBP SupportFundraisingAssets (r:1 w:1)
	fn add_fundraising_asset() -> Weight {
		(20_550_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: LBP SupportFundraisingAssets (r:1 w:1)
	fn remove_fundraising_asset() -> Weight {
		(21_561_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: LBP SupportFundraisingAssets (r:1 w:0)
	// Storage: LBP OngoingLbps (r:1 w:1)
	// Storage: LBP NextLbpId (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:1)
	// Storage: LBP Lbps (r:0 w:1)
	fn create_lbp() -> Weight {
		(126_654_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: LBP Lbps (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:1 w:0)
	// Storage: LBP OngoingLbps (r:0 w:1)
	fn exit_lbp() -> Weight {
		(93_223_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: LBP OngoingLbps (r:1 w:0)
	// Storage: LBP Lbps (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:3 w:1)
	fn swap_exact_amount_supply() -> Weight {
		(165_535_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: LBP OngoingLbps (r:1 w:0)
	// Storage: LBP Lbps (r:1 w:1)
	// Storage: Tokens Accounts (r:5 w:5)
	// Storage: System Account (r:3 w:1)
	fn swap_exact_amount_target() -> Weight {
		(155_115_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
}