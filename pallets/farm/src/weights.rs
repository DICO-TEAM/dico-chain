//! Autogenerated weights for pallet_farm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kico"), DB CACHE: 1024

// Executed Command:
// target/release/dico
// benchmark
// --chain=kico
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_farm
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/pallet-weight-template.hbs
// --output
// ./pallets/farm/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_farm.
pub trait WeightInfo {
	fn set_halving_period() -> Weight;
	fn set_dico_per_block() -> Weight;
	fn set_start_block() -> Weight;
	fn create_pool() -> Weight;
	fn update_pool_alloc_point() -> Weight;
	fn deposit_lp() -> Weight;
	fn withdraw_lp() -> Weight;
}

/// Weights for pallet_farm using the Substrate node and recommended hardware.
pub struct DicoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DicoWeight<T> {
	// Storage: Farm HalvingPeriod (r:0 w:1)
	fn set_halving_period() -> Weight {
		(17_020_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Farm DicoPerBlock (r:0 w:1)
	fn set_dico_per_block() -> Weight {
		(17_271_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Farm StartBlock (r:0 w:1)
	fn set_start_block() -> Weight {
		(17_051_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Storage: Farm Pools (r:1 w:1)
	// Storage: Farm StartBlock (r:1 w:0)
	// Storage: Farm NextPoolId (r:1 w:1)
	// Storage: Farm TotalAllocPoint (r:1 w:1)
	fn create_pool() -> Weight {
		(44_750_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Farm Pools (r:2 w:1)
	// Storage: Tokens Accounts (r:1 w:0)
	// Storage: Farm TotalAllocPoint (r:1 w:1)
	fn update_pool_alloc_point() -> Weight {
		(50_830_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Farm Pools (r:1 w:1)
	// Storage: Farm Participants (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	fn deposit_lp() -> Weight {
		(88_363_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Farm Participants (r:1 w:1)
	// Storage: Farm Pools (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:0)
	// Storage: Farm HalvingPeriod (r:1 w:0)
	// Storage: Farm StartBlock (r:1 w:0)
	// Storage: Farm DicoPerBlock (r:1 w:0)
	// Storage: Farm TotalAllocPoint (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn withdraw_lp() -> Weight {
		(165_555_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Farm HalvingPeriod (r:0 w:1)
	fn set_halving_period() -> Weight {
		(17_020_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Farm DicoPerBlock (r:0 w:1)
	fn set_dico_per_block() -> Weight {
		(17_271_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Farm StartBlock (r:0 w:1)
	fn set_start_block() -> Weight {
		(17_051_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Tokens TotalIssuance (r:1 w:0)
	// Storage: Farm Pools (r:1 w:1)
	// Storage: Farm StartBlock (r:1 w:0)
	// Storage: Farm NextPoolId (r:1 w:1)
	// Storage: Farm TotalAllocPoint (r:1 w:1)
	fn create_pool() -> Weight {
		(44_750_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Farm Pools (r:2 w:1)
	// Storage: Tokens Accounts (r:1 w:0)
	// Storage: Farm TotalAllocPoint (r:1 w:1)
	fn update_pool_alloc_point() -> Weight {
		(50_830_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Farm Pools (r:1 w:1)
	// Storage: Farm Participants (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	fn deposit_lp() -> Weight {
		(88_363_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Farm Participants (r:1 w:1)
	// Storage: Farm Pools (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:0)
	// Storage: Farm HalvingPeriod (r:1 w:0)
	// Storage: Farm StartBlock (r:1 w:0)
	// Storage: Farm DicoPerBlock (r:1 w:0)
	// Storage: Farm TotalAllocPoint (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn withdraw_lp() -> Weight {
		(165_555_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
}