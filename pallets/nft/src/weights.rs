//! Autogenerated weights for pallet_nft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kico"), DB CACHE: 1024

// Executed Command:
// target/release/dico
// benchmark
// --chain=kico
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_nft
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/pallet-weight-template.hbs
// --output
// ./pallets/nft/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nft.
pub trait WeightInfo {
	fn create_class() -> Weight;
	fn mint() -> Weight;
	fn claim() -> Weight;
	fn burn() -> Weight;
	fn transfer() -> Weight;
	fn offer_token_for_sale() -> Weight;
	fn withdraw_sale() -> Weight;
	fn buy_token() -> Weight;
	fn active() -> Weight;
	fn inactive() -> Weight;
}

/// Weights for pallet_nft using the Substrate node and recommended hardware.
pub struct DicoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DicoWeight<T> {
	// Storage: Nft IssuerOf (r:1 w:1)
	// Storage: Nft NextClassId (r:1 w:1)
	// Storage: Nft Classes (r:0 w:1)
	fn create_class() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft NextTokenId (r:1 w:1)
	// Storage: Nft AllTokensHash (r:1 w:1)
	// Storage: Nft Classes (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	// Storage: Nft Tokens (r:0 w:1)
	fn mint() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Nft Classes (r:1 w:0)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	// Storage: Nft TokensOf (r:1 w:1)
	fn claim() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	// Storage: Nft TokensOf (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	fn burn() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft TokensOf (r:2 w:2)
	fn transfer() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	fn offer_token_for_sale() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	fn withdraw_sale() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft TokensOf (r:2 w:2)
	fn buy_token() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Nft TokensOf (r:1 w:0)
	fn active() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	fn inactive() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Nft IssuerOf (r:1 w:1)
	// Storage: Nft NextClassId (r:1 w:1)
	// Storage: Nft Classes (r:0 w:1)
	fn create_class() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft NextTokenId (r:1 w:1)
	// Storage: Nft AllTokensHash (r:1 w:1)
	// Storage: Nft Classes (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	// Storage: Nft Tokens (r:0 w:1)
	fn mint() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Nft Classes (r:1 w:0)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	// Storage: Nft TokensOf (r:1 w:1)
	fn claim() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	// Storage: Nft TokensOf (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	fn burn() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft TokensOf (r:2 w:2)
	fn transfer() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	fn offer_token_for_sale() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	fn withdraw_sale() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft TokensOf (r:2 w:2)
	fn buy_token() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Nft TokensOf (r:1 w:0)
	fn active() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	fn inactive() -> Weight {
		Weight::from_ref_time(20_0000_0000)
	}
}
