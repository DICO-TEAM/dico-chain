
//! Autogenerated weights for `pallet_nft`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-27, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kico"), DB CACHE: 128

// Executed Command:
// ./target/release/dico
// benchmark
// --execution
// Wasm
// --wasm-execution
// compiled
// --pallet
// pallet_nft
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --raw
// --output
// ./pallets/nft/src/weights.rs
// --chain
// kico

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait NftWeightInfo {
	fn create_class() -> Weight;
	fn mint() -> Weight;
	fn claim() -> Weight;
	fn burn() -> Weight;
	fn transfer() -> Weight;
	fn offer_token_for_sale() -> Weight;
	fn withdraw_sale() -> Weight;
	fn buy_token() -> Weight;
	fn active() -> Weight;
	fn inactive() -> Weight;
}

impl NftWeightInfo for () {
	fn create_class() -> Weight {
		( 0 as Weight)
	}

	fn mint() -> Weight {
		( 0 as Weight)
	}

	fn claim() -> Weight {
		( 0 as Weight)
	}

	fn burn() -> Weight {
		( 0 as Weight)
	}

	fn transfer() -> Weight {
		( 0 as Weight)
	}

	fn offer_token_for_sale() -> Weight {
		( 0 as Weight)
	}

	fn withdraw_sale() -> Weight {
		( 0 as Weight)
	}

	fn buy_token() -> Weight {
		( 0 as Weight)
	}

	fn active() -> Weight {
		( 0 as Weight)
	}

	fn inactive() -> Weight {
		( 0 as Weight)
	}
}
/// Weight functions for `pallet_nft`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> NftWeightInfo for WeightInfo<T> {
	// Storage: Nft IssuerOf (r:1 w:1)
	// Storage: Nft NextClassId (r:1 w:1)
	// Storage: Nft Classes (r:0 w:1)
	fn create_class() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Nft NextTokenId (r:1 w:1)
	// Storage: Nft AllTokensHash (r:1 w:1)
	// Storage: Nft Classes (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	// Storage: Nft Tokens (r:0 w:1)
	fn mint() -> Weight {
		(26_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Nft Classes (r:1 w:0)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	// Storage: Nft TokensOf (r:1 w:1)
	fn claim() -> Weight {
		(33_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	// Storage: Nft TokensOf (r:1 w:1)
	// Storage: Nft NoOwnerTokensOf (r:1 w:1)
	fn burn() -> Weight {
		(28_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft TokensOf (r:2 w:2)
	fn transfer() -> Weight {
		(22_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	fn offer_token_for_sale() -> Weight {
		(19_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	fn withdraw_sale() -> Weight {
		(19_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft TokensOf (r:2 w:2)
	fn buy_token() -> Weight {
		(45_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	// Storage: Nft TokensOf (r:1 w:0)
	fn active() -> Weight {
		(19_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Nft Tokens (r:1 w:1)
	// Storage: Nft InSaleTokens (r:1 w:0)
	fn inactive() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
