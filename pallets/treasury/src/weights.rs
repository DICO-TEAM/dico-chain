//! Autogenerated weights for pallet_dico_treasury
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("tico"), DB CACHE: 128

// Executed Command:
// target/release/dico
// benchmark
// --chain=tico
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_dico_treasury
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/pallet-weight-template.hbs
// --output
// ./pallets/treasury/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_dico_treasury.
pub trait WeightInfo {
	fn propose_spend() -> Weight;
	fn reject_proposal() -> Weight;
	fn approve_proposal() -> Weight;
	fn spend_fund() -> Weight;
}

/// Weights for pallet_dico_treasury using the Substrate node and recommended hardware.
pub struct DicoWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DicoWeight<T> {
	// Storage: DicoTreasury ProposalCount (r:1 w:1)
	// Storage: DicoTreasury Proposals (r:0 w:1)
	fn propose_spend() -> Weight {
		(39_839_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DicoTreasury Proposals (r:1 w:1)
	fn reject_proposal() -> Weight {
		(43_162_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: DicoTreasury Proposals (r:1 w:1)
	// Storage: DicoTreasury Approvals (r:1 w:1)
	fn approve_proposal() -> Weight {
		(28_292_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DicoTreasury Approvals (r:1 w:1)
	// Storage: DicoTreasury Proposals (r:1 w:0)
	fn spend_fund() -> Weight {
		(25_530_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DicoTreasury ProposalCount (r:1 w:1)
	// Storage: DicoTreasury Proposals (r:0 w:1)
	fn propose_spend() -> Weight {
		(39_839_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DicoTreasury Proposals (r:1 w:1)
	fn reject_proposal() -> Weight {
		(43_162_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: DicoTreasury Proposals (r:1 w:1)
	// Storage: DicoTreasury Approvals (r:1 w:1)
	fn approve_proposal() -> Weight {
		(28_292_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DicoTreasury Approvals (r:1 w:1)
	// Storage: DicoTreasury Proposals (r:1 w:0)
	fn spend_fund() -> Weight {
		(25_530_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}