
//! Autogenerated weights for `pallet_ico`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-27, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kico"), DB CACHE: 128

// Executed Command:
// ./target/release/dico
// benchmark
// --execution
// Wasm
// --wasm-execution
// compiled
// --pallet
// pallet_ico
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --raw
// --output
// ./pallets/ico/src/weights.rs
// --chain
// kico

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ico`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ico::WeightInfo for WeightInfo<T> {
	// Storage: Ico IcoMinUsdtAmount (r:1 w:0)
	// Storage: Ico IcoMaxUsdtAmount (r:1 w:0)
	// Storage: Ico PendingIco (r:1 w:1)
	// Storage: Ico TotalNum (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Kyc KYCOf (r:1 w:0)
	// Storage: Ico InitiatedIcoesOf (r:1 w:1)
	fn initiate_ico() -> Weight {
		(59_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Ico PendingIco (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Ico Indexs (r:1 w:1)
	// Storage: Ico InitiatedIcoesOf (r:1 w:1)
	// Storage: Ico PassedIcoes (r:1 w:1)
	// Storage: Ico Ico (r:0 w:1)
	// Storage: Ico IsUnservePledge (r:0 w:1)
	fn permit_ico() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Ico PendingIco (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Ico InitiatedIcoesOf (r:1 w:1)
	fn reject_ico() -> Weight {
		(50_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Ico Ico (r:1 w:1)
	// Storage: Ico PowerMultipleOf (r:1 w:0)
	// Storage: Ico UnReleaseAssets (r:2 w:2)
	// Storage: Ico IcoMinUsdtAmount (r:1 w:0)
	// Storage: Ico IcoMaxUsdtAmount (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Ico IcoesOf (r:1 w:1)
	// Storage: Ico TotalPowerOf (r:1 w:1)
	fn join() -> Weight {
		(95_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Ico Ico (r:1 w:1)
	// Storage: Ico PassedIcoes (r:1 w:1)
	fn terminate_ico() -> Weight {
		(22_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Ico Ico (r:1 w:0)
	// Storage: Ico RequestReleaseInfo (r:1 w:1)
	fn request_release() -> Weight {
		(32_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Ico Ico (r:1 w:0)
	// Storage: Ico RequestReleaseInfo (r:1 w:1)
	fn cancel_request() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Ico Ico (r:1 w:1)
	// Storage: Ico RequestReleaseInfo (r:1 w:1)
	fn permit_release() -> Weight {
		(33_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Ico Ico (r:1 w:0)
	// Storage: Ico IsUnservePledge (r:1 w:1)
	// Storage: Ico UnReleaseAssets (r:2 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Ico IcoLocks (r:1 w:1)
	fn user_release_ico_amount() -> Weight {
		(62_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Ico IcoLocks (r:1 w:1)
	fn unlock() -> Weight {
		(9_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Ico IcoMaxUsdtAmount (r:0 w:1)
	// Storage: Ico IcoMinUsdtAmount (r:0 w:1)
	fn set_system_ico_amount_bound() -> Weight {
		(10_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Ico Ico (r:1 w:1)
	// Storage: Ico IcoMinUsdtAmount (r:1 w:0)
	// Storage: Ico IcoMaxUsdtAmount (r:1 w:0)
	fn initiator_set_ico_amount_bound() -> Weight {
		(22_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Ico Ico (r:1 w:1)
	fn initiator_set_ico_max_times() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Ico Ico (r:1 w:1)
	// Storage: Ico TotalUsdt (r:1 w:1)
	// Storage: Ico UnReleaseAssets (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn get_reward() -> Weight {
		(45_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Ico PowerMultipleOf (r:1 w:1)
	fn set_asset_power_multiple() -> Weight {
		(12_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
